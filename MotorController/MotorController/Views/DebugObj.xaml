<UserControl x:Class="MotorController.Views.DebugObj"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
      xmlns:Helpers="clr-namespace:MotorController.Helpers"
      xmlns:local="clr-namespace:MotorController.Views"
      xmlns:vm="clr-namespace:MotorController.ViewModels"
      mc:Ignorable="d" 
      d:DesignHeight="30" d:DesignWidth="470">
    <UserControl.Resources>
        <Style x:Key="ExampleToolbarButtonStyle" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
            <Setter Property="Padding" Value="1" />
            <Setter Property="Margin" Value="2" />
            <Setter Property="Width" Value="110" />
            <Setter Property="MaxHeight" Value="28" />
        </Style>
        <Style x:Key="TextBoxStyle" TargetType="TextBox">
            <!--Background="{DynamicResource ControlBackgroundBrush}"
              BorderBrush="Black"-->
            <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
            <Setter Property="BorderBrush" Value="Black" />
        </Style>
    </UserControl.Resources>
    <!---->
    <Border BorderBrush="White" BorderThickness="1" CornerRadius="1">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0"/>
            <ColumnDefinition Width="0"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="1"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="1"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="10"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <!-- new object view -->
    <!-- Button Add/Remove -->

    <!--<Button Grid.Column="0" Command="{Binding AddCommand}" Style="{StaticResource ExampleToolbarButtonStyle}" Height="25" Width="25" BorderBrush="#FFF3F3F3" BorderThickness="0" Visibility="{Binding AddButtonVisibility}">
                        <StackPanel Orientation="Horizontal">
                            <Image Margin="0"
        				                Source="pack://application:,,,/Images/plusZoom.png"
        				                Stretch="Fill" Width="20" Height="20" />
                        </StackPanel>
                    </Button>
                    <Button Grid.Column="0" Command="{Binding RemoveCommand}" Height="25" Width="25" BorderBrush="White" BorderThickness="0">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ExampleToolbarButtonStyle}">
                                <Setter Property="Visibility" Value="Hidden" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding AddButtonVisibility}" Value="Hidden">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                        <StackPanel Orientation="Horizontal">
                            <Image Margin="0"
            	                    Source="pack://application:,,,/Images/minus3.png" 
                                    Width="20" Height="20" Stretch="Fill" />
                        </StackPanel>
                    </Button>-->
    <!--end new object view -->

    <!--ID-->

    <TextBox  Grid.Column="2"  x:Name="ID"
                                            Width="50" 
                                            Text="{Binding ID}" 
                                            Foreground="White" FontSize="12"
                                            VerticalContentAlignment="Center" 
                                Template="{DynamicResource TextBoxTemplate}">
        <TextBox.Style>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}">
                <Setter Property="IsReadOnly" Value="False" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding AddButtonVisibility}" Value="Hidden">
                        <Setter Property="IsReadOnly" Value="True" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </TextBox.Style>
        <i:Interaction.Behaviors>
            <Helpers:AllowableCharactersTextBoxBehavior/>
        </i:Interaction.Behaviors>
    </TextBox>
    <!--Index-->

    <TextBox  Grid.Column="4" Width="50"
                                            Text="{Binding Index}" 
                                            Foreground="White" FontSize="12"
                                            VerticalContentAlignment="Center"
                                            Template="{DynamicResource TextBoxTemplate}">
        <TextBox.Style>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}">
                <Setter Property="IsReadOnly" Value="False" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding AddButtonVisibility}" Value="Hidden">
                        <Setter Property="IsReadOnly" Value="True" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </TextBox.Style>
        <i:Interaction.Behaviors>
            <Helpers:AllowableCharactersTextBoxBehavior/>
        </i:Interaction.Behaviors>
    </TextBox>
    <!--Type : Int/Float-->
    <Grid Grid.Column="6">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <CheckBox Grid.Column="0"     
                                    Style="{StaticResource CheckBoxStyle3}"
                                                VerticalAlignment="Center"
                                                IsChecked="{Binding IntFloat}">
        </CheckBox>
        <Separator Grid.Column="1" Width="10" Background="Transparent" Visibility="Hidden"/>
    </Grid>

    <Line Grid.Column="7" Stroke="Gray" Y2="16" HorizontalAlignment="Center" VerticalAlignment="Center" Width="10"/>
    <!-- Get button-->
    <!-- Get data-->
    <Grid Grid.Column="8">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Button Grid.Column="0" Height="22" Width="30" 
                                                Template="{DynamicResource PressedButton}" 
                                                Command="{Binding Get}"
                                                Foreground="White"
                                                Content="Get">
        </Button>
        <StackPanel Grid.Column="1" Orientation="Horizontal">
            <local:UC_ProgrammerTextBox
                TextStr="{Binding TextStr,UpdateSourceTrigger=PropertyChanged}"
                IsReadOnly="{Binding IsReadOnly,UpdateSourceTrigger=PropertyChanged}"
                Width="100"
                Foreground="White" FontSize="12"
                VerticalContentAlignment="Center"
                Visibility="Visible"
                DataContext="{Binding ProgrammerTextBox_Get, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            </local:UC_ProgrammerTextBox>
            <!--<TextBox Width="100"
                                            Text="{Binding GetData, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                                            Foreground="White" FontSize="12"
                                            VerticalContentAlignment="Center"
                                            IsEnabled="True"
                                            IsReadOnly="True">
            </TextBox>-->
        </StackPanel>
        <Separator Grid.Column="2" Width="10" Background="Transparent" Visibility="Hidden"/>
    </Grid>

    <Line Grid.Column="9" Stroke="Gray" Y2="16" HorizontalAlignment="Center" VerticalAlignment="Center" Width="10"/>

    <!-- Set button-->
    <Grid Grid.Column="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Button Grid.Column="0" Height="22" Width="30"
                                                Template="{DynamicResource PressedButton}" 
                                                Command="{Binding Set}"  
                                                BorderThickness="0.5" 
                                                Foreground="White"
                                                Content="Set">
        </Button>
        <!-- Set data -->
        <local:UC_ProgrammerTextBox
                TextStr="{Binding TextStr,UpdateSourceTrigger=PropertyChanged}"
                IsReadOnly="{Binding IsReadOnly,UpdateSourceTrigger=PropertyChanged}"
                Grid.Column="1" Width="100"
                Foreground="White" FontSize="12"
                VerticalContentAlignment="Center"
                Visibility="Visible"
                DataContext="{Binding ProgrammerTextBox_Set, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
        </local:UC_ProgrammerTextBox>
    </Grid>
    </Grid>
    </Border>
</UserControl>


<!--Foreground="White" FontSize="12"  DataContext="{Binding ProgrammerTextBox_Set}"
                           VerticalContentAlignment="Center"
                   Text="{Binding SetData,UpdateSourceTrigger=PropertyChanged}">
            <TextBox.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Decimal" Style="{x:Null}" IsChecked="{Binding DecimalCheck}" IsCheckable="True"/>
                    <MenuItem Header="Hexadecimal" Style="{x:Null}" IsChecked="{Binding HexadecimalCheck}" IsCheckable="True"/>
                    <MenuItem Header="Cut" Command="ApplicationCommands.Cut" Style="{x:Null}"/>
                    <MenuItem Header="Copy" Command="ApplicationCommands.Copy" Style="{x:Null}"/>
                    <MenuItem Header="Paste" Command="ApplicationCommands.Paste" Style="{x:Null}"/>
                </ContextMenu>
            </TextBox.ContextMenu>
            <i:Interaction.Behaviors>
                <Helpers:AllowableCharactersTextBoxBehavior RegularExpression="{Binding RegEx}" MaxLength="20"/>
            </i:Interaction.Behaviors>-->